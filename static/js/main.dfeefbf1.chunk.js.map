{"version":3,"sources":["../../src/Star.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Star","onHover","useState","Math","fill","inKeyboardMode","fillPercentage","fillOpacity","isHighlighted","stroke","isSelected","strokeWidth","className","style","display","onMouseOver","onMouseDown","setIsActive","onMouseUp","onChange","onMouseLeave","onTouchStart","onTouchEnd","viewBox","width","height","size","id","uniqId","in","stdDeviation","d","opacity","filter","transition","screenReaderOnly","position","padding","margin","overflow","clip","whiteSpace","borderWidth","StarRating","children","isMount","isMountRef","useRef","useEffect","useIsMounted","child","React","inputRef","input","value","ref","node","event","setValue","onFocus","setHasFocus","onBlur","onKeyDown","setInKeyboardMode","step","parseFloat","min","newValue","decrement","max","increment","event2","CustomEvent","starCount","stars","Array","i","x","key","hoverIndex","setHoverIndex","handleHover","hasFocus","onMouseOut","onClick","onDragStart","App","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfeefbf1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ninterface Props {\n  size: string;\n  fillPercentage: number;\n  inKeyboardMode: boolean;\n  isHighlighted: boolean;\n  isSelected: boolean;\n  onChange: Function;\n  onHover: Function;\n}\n\nconst Star = ({\n  size,\n  fillPercentage,\n  inKeyboardMode,\n  isHighlighted,\n  isSelected,\n  onChange,\n  onHover,\n}: Props) => {\n  const [isActive, setIsActive] = useState(false);\n  const [uniqId] = useState(() => Math.random());\n\n  const handleMouseUp = () => {\n    onChange();\n    setIsActive(false);\n  };\n\n  const handleTouchStart = () => {\n    onHover();\n    setIsActive(true);\n  };\n\n  let fill;\n  if (inKeyboardMode || isHighlighted || fillPercentage > 0) {\n    fill = \"#F3A536\";\n  } else {\n    fill = \"white\";\n  }\n\n  let fillOpacity;\n  if ((inKeyboardMode || isHighlighted) && fillPercentage > 0) {\n    fillOpacity = 1;\n  } else if (!inKeyboardMode && (isHighlighted || fillPercentage > 0)) {\n    fillOpacity = 0.35;\n  } else {\n    fillOpacity = 0;\n  }\n\n  let stroke;\n  if (isSelected || isActive) {\n    stroke = \"#0099E0\";\n  } else {\n    stroke = \"#F3A536\";\n  }\n\n  let strokeWidth;\n  if (isActive) {\n    strokeWidth = 1.8;\n  } else {\n    strokeWidth = 1;\n  }\n\n  return (\n    <div\n      className=\"aaronshaf-star-rating-star\"\n      style={{ display: \"inline-block\" }}\n      onMouseOver={() => onHover()}\n      onMouseDown={() => setIsActive(true)}\n      onMouseUp={() => handleMouseUp()}\n      onMouseLeave={() => {\n        setIsActive(false);\n      }}\n      onTouchStart={() => {\n        onHover();\n        handleTouchStart();\n      }}\n      onTouchEnd={() => {\n        onChange();\n        setIsActive(false);\n      }}\n    >\n      <svg viewBox=\"0 0 24 24\" style={{ width: size, height: size }}>\n        <filter id={`blurfilter-${uniqId}`} width=\"24\" height=\"24\">\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.3\" />\n        </filter>\n        <path\n          d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n          fill=\"transparent\"\n          stroke=\"#0099E0\"\n          strokeWidth=\"1\"\n          opacity={isSelected || isActive ? 1 : 0}\n          style={{\n            filter: `url(#blurfilter-${uniqId})`,\n            transition: \"opacity 0.1s ease-in-out\",\n          }}\n        ></path>\n        <path\n          d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n          fill={fill}\n          stroke={stroke}\n          strokeWidth={strokeWidth}\n          fillOpacity={fillOpacity}\n          style={{\n            transition: \"stroke-width 0.1s ease-in-out\",\n          }}\n        ></path>\n      </svg>\n    </div>\n  );\n};\n\nexport default Star;\n","import React, { useState, useEffect, useRef, ReactElement } from \"react\";\nimport Star from \"./Star\";\n\ninterface Props {\n  size?: string;\n  children: JSX.IntrinsicElements[\"input\"];\n}\n\nconst screenReaderOnly: Partial<CSSStyleDeclaration> = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  padding: \"0\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  borderWidth: \"0\",\n};\n\nexport const useIsMounted = () => {\n  const isMountRef = useRef(true);\n  useEffect(() => {\n    isMountRef.current = false;\n  }, []);\n  return isMountRef.current;\n};\n\nexport const StarRating = ({ size, children }: Props) => {\n  const isMount = useIsMounted();\n  const child: any = React.Children.only(children);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [value, setValue] = useState(child.props.value);\n  const [hoverIndex, setHoverIndex] = useState(child.props.value);\n  const [hasFocus, setHasFocus] = useState(false);\n  const [inKeyboardMode, setInKeyboardMode] = useState(false);\n\n  const decrement = () => {\n    const step = parseFloat(child.props.step) || 1;\n    const min = parseFloat(child.props.min);\n    let newValue = parseFloat(value) - step;\n    if (typeof child.props.min !== \"undefined\" && newValue < min) {\n      newValue = min;\n    }\n    setValue(newValue);\n  };\n\n  const increment = () => {\n    const step = parseFloat(child.props.step) || 1;\n    const max = parseFloat(child.props.max);\n    let newValue = parseFloat(value) + step;\n    if (typeof child.props.max !== \"undefined\" && newValue > max) {\n      newValue = max;\n    }\n    setValue(newValue);\n  };\n\n  const input = React.cloneElement(child as React.ReactElement<any>, {\n    value,\n    ref: (node) => {\n      if (node) {\n        inputRef.current = node;\n      }\n      return node;\n    },\n    style: screenReaderOnly,\n    onChange: (event) => {\n      if (event.target.value !== value) {\n        setValue(event.target.value);\n      }\n    },\n    onFocus: () => {\n      setHasFocus(true);\n    },\n    onBlur: () => {\n      setHasFocus(false);\n    },\n    onKeyDown: (event) => {\n      if (event.keyCode >= 37 && event.keyCode <= 40) {\n        setInKeyboardMode(true);\n      }\n      if (event.keyCode === 37) {\n        // 'ArrowLeft'\n        decrement();\n      } else if (event.keyCode === 39) {\n        // 'ArrowRight'\n        increment();\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (!isMount) {\n      const event2 = new CustomEvent(\"change\");\n      inputRef.current && inputRef.current.dispatchEvent(event2);\n      child.props.onChange && child.props.onChange(event2);\n    }\n  }, [value]);\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n  };\n\n  const handleHover = (hoverIndex) => {\n    setHoverIndex(hoverIndex);\n    setInKeyboardMode(false);\n  };\n\n  const handleClick = (event) => {\n    if (event.target !== input) {\n      event.preventDefault();\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n      setInKeyboardMode(false);\n    }\n  };\n\n  const starCount = Math.ceil(parseFloat(input.props.max) || 5);\n  const stars = Array(starCount)\n    .fill(null)\n    .map((x, i) => i + 1)\n    .map((x) => {\n      const fillPercentage = parseFloat(input.props.value) < x ? 0 : 100;\n      return (\n        <Star\n          size={size || \"1rem\"}\n          key={x}\n          onChange={() => handleChange(x)}\n          onHover={() => handleHover(x)}\n          isSelected={\n            hasFocus && Math.floor(parseFloat(input.props.value)) === x\n          }\n          fillPercentage={fillPercentage}\n          isHighlighted={hoverIndex >= x}\n          inKeyboardMode={inKeyboardMode}\n        />\n      );\n    });\n  return (\n    <div\n      className=\"aaronshaf-star-rating\"\n      onMouseOut={() => setInKeyboardMode(true)}\n      onClick={handleClick}\n      onDragStart={() => false}\n      aria-hidden\n    >\n      {input}\n      {stars}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { StarRating } from \"star-rating\";\nimport \"star-rating/dist/index.css\";\n\nconst App = () => {\n  const handleChange = (event: any) => {\n    console.log(\"value changed\", event.target.value);\n  };\n\n  return (\n    <StarRating size=\"2rem\">\n      <input onChange={handleChange} type=\"number\" min=\"1\" max=\"5\" value=\"0\" />\n    </StarRating>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}